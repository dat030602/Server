events {
    worker_connections 1024;  # Số lượng kết nối đồng thời tối đa mỗi worker
}

http {
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;  # Giới hạn tốc độ yêu cầu trên mỗi IP
    limit_conn_zone $binary_remote_addr zone=addr:10m;  # Khu vực để giới hạn số kết nối đồng thời từ một IP
    limit_conn addr 10;  # Giới hạn số kết nối đồng thời từ mỗi IP

    # Định dạng log cho log truy cập
    log_format access_log_format '[$time_local] - $remote_addr';

    # Định dạng log cho log hàng đợi khi có lỗi 503
    log_format queue_log_format '[$time_local - $remote_addr] "$request" '
                                 '503 $body_bytes_sent "$http_referer" '
                                 '"$http_user_agent"';
    
    # Định dạng log cho log yêu cầu
    log_format request_log_format '[$time_local - $remote_addr] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

    ## Giới hạn kích thước
    client_body_buffer_size     128K;  # Kích thước bộ đệm cho body yêu cầu của client
    client_header_buffer_size   128K;  # Kích thước bộ đệm cho header yêu cầu của client
    client_max_body_size        200M;  # Kích thước tối đa cho body yêu cầu
    large_client_header_buffers 2 1k;  # Số lượng và kích thước bộ đệm cho header lớn của client

    ## Thời gian chờ
    client_body_timeout   3600;  # Thời gian chờ cho body yêu cầu
    client_header_timeout 3600;  # Thời gian chờ cho header yêu cầu
    # expires               24h;  # Thời gian hết hạn cho các file tĩnh
    keepalive_timeout     3600 3600;  # Thời gian giữ kết nối sống
    send_timeout          3600;  # Thời gian chờ cho việc gửi dữ liệu

    ## Tùy chọn chung
    ignore_invalid_headers   on;  # Bỏ qua các header không hợp lệ
    keepalive_requests      100000;  # Số yêu cầu tối đa cho một kết nối keep-alive
    reset_timedout_connection on;  # Đặt lại kết nối khi timeout
    recursive_error_pages    on;  # Cho phép các trang lỗi đệ quy
    sendfile                 on;  # Sử dụng sendfile cho truyền tải file
    sendfile_max_chunk      512k;  # Kích thước tối đa cho mỗi chunk của sendfile
    server_name_in_redirect off;  # Tắt tên server trong redirect
    server_tokens           off;  # Ẩn thông tin phiên bản Nginx

    ## Tùy chọn TCP
    tcp_nopush on;  # Tối ưu hóa việc truyền tải TCP
    tcp_nodelay on;  # Giảm độ trễ trong TCP

    ## Tùy chọn cache
    open_file_cache max=10000 inactive=20s;  # Bộ đệm file mở tối đa
    open_file_cache_valid    60s;  # Thời gian hợp lệ cho bộ đệm file mở
    open_file_cache_min_uses 2;  # Số lần sử dụng tối thiểu trước khi xóa file trong bộ đệm
    open_file_cache_errors   on;  # Bộ đệm các lỗi khi mở file

    # Giới hạn kết nối mỗi IP ở mức firewall để tránh tấn công HTTP flood
    # limit_req_zone $binary_remote_addr zone=slimitss:10m rate=5r/s;
    # limit_req zone=slimitss burst=100;

    gzip  on;  # Bật nén gzip
    gzip_static on;  # Bật nén cho file tĩnh
    # gzip_disable "msie6";  # Tắt gzip cho IE6
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";  # Tắt gzip cho các phiên bản IE cũ
    gzip_vary on;  # Bật header Vary cho gzip
    gzip_proxied any;  # Bật gzip cho mọi yêu cầu được proxy
    gzip_comp_level 6;  # Mức độ nén gzip (1-9)
    gzip_min_length 1100;  # Kích thước tối thiểu để nén
    gzip_buffers 32 32k;  # Số lượng và kích thước bộ đệm cho gzip
    gzip_http_version 1.1;  # Phiên bản HTTP cho gzip
    gzip_types text/plain text/css application/json application/x-javascript application/javascript text/xml application/xml;  # Các loại MIME để nén
    gzip_types application/xml+rss text/javascript image/svg+xml application/vnd.ms-fontobject application/x-font-ttf font/opentype;  # Các loại MIME bổ sung để nén
    gzip_types application/ecmascript application/postscript application/pdf;  # Các loại MIME bổ sung để nén

    map $sent_http_content_type $cacheable_types {
        "text/css" "max-age=864000";  # Thời gian cache cho CSS
        "image/jpeg" "max-age=864000";  # Thời gian cache cho JPEG
        "image/png" "max-age=864000";  # Thời gian cache cho PNG
        default "";  # Mặc định không cache
    }

    # fastcgi_cache_path /var/lib/nginx/fastcgi_cache levels=1:2 keys_zone=ERPOnline:100m inactive=60m;  # Đường dẫn và cấu hình bộ đệm FastCGI
    # fastcgi_cache_key "$scheme$request_method$host$request_uri";  # Khóa cache cho FastCGI

    ## Tùy chọn proxy
    proxy_buffering                 on;  # Bật buffering cho proxy
    proxy_cache_min_uses            3;  # Số lần sử dụng tối thiểu trước khi cache
    # proxy_cache_path                /var/lib/nginx/cache/ levels=1:2 keys_zone=cache:60m inactive=90m max_size=1000m;  # Đường dẫn và cấu hình bộ đệm proxy
    # proxy_temp_path                 /var/lib/nginx/proxy;  # Đường dẫn tạm cho proxy

    # Cache các mã trả về khác nhau trong các khoảng thời gian khác nhau
    # Cache các trang bình thường trong 10 phút
    # proxy_cache cache;

    add_header X-Cache-Status $upstream_cache_status;  # Thêm header để kiểm tra trạng thái cache
    proxy_cache_valid               200 302 10m;  # Thời gian cache cho mã trả về 200 và 302
    # add_header Cache-Control no-cache;  # Thêm header Cache-Control
    proxy_cache_valid               404 1m;  # Thời gian cache cho mã trả về 404
    proxy_ignore_client_abort       off;  # Không bỏ qua khi client hủy yêu cầu
    proxy_intercept_errors          on;  # Chặn lỗi từ upstream
    proxy_next_upstream             error timeout invalid_header;  # Chuyển đến upstream khác khi gặp lỗi
    proxy_set_header                X-Forwarded-For $remote_addr;  # Gửi địa chỉ IP của client
    proxy_connect_timeout           600;  # Thời gian chờ kết nối đến upstream
    proxy_send_timeout              600;  # Thời gian chờ gửi dữ liệu đến upstream
    proxy_read_timeout              600;  # Thời gian chờ nhận dữ liệu từ upstream
    proxy_cache_revalidate          on;  # Kiểm tra lại cache khi có yêu cầu
    proxy_buffers                   16 32k;  # Số lượng và kích thước bộ đệm cho proxy
    proxy_buffer_size               128k;  # Kích thước bộ đệm cho proxy
    # proxy_cache_key  "$scheme://$host$request_uri";  # Khóa cache cho proxy
    # proxy_redirect off;  # Tắt redirect từ upstream

    server {
        listen 80;  # Lắng nghe trên cổng 80 (HTTP)
        server_name _;  # Tên server
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;  # Directory for Certbot challenge files
        }

        return 301 https://$host$request_uri;  # Chuyển hướng tất cả yêu cầu HTTP đến HTTPS
    }

    server {
        listen 443 ssl;  # Lắng nghe trên cổng 443 (HTTPS)
        server_name _;  # Tên server

        # ssl_certificate /etc/nginx/certs/certificate.crt;  # Đường dẫn đến chứng chỉ SSL
        # ssl_certificate_key /etc/nginx/certs/private_key.key;  # Đường dẫn đến khóa riêng SSL

        ssl_certificate /etc/letsencrypt/selfsigned.crt;  # Đường dẫn đến chứng chỉ SSL
        ssl_certificate_key /etc/letsencrypt/selfsigned.key;  # Đường dẫn đến khóa riêng SSL

        location / {
            limit_conn addr 10;  # Giới hạn kết nối từ mỗi địa chỉ IP

            # Chuyển tiếp đến upstream Odoo
            proxy_pass http://odoo_servers;  # Chuyển tiếp đến nhóm upstream
            proxy_set_header Host $host;  # Gửi tiêu đề Host
            proxy_set_header X-Real-IP $remote_addr;  # Gửi địa chỉ IP của client
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Gửi thông tin forwarded IP
            proxy_set_header X-Forwarded-Proto $scheme;  # Gửi thông tin về giao thức
            access_log /var/log/nginx/requests.log request_log_format;  # Log yêu cầu
            error_page 503 = @fallback;  # Nếu bị giới hạn, chuyển đến fallback
        }

        location @fallback {
            access_log /var/log/nginx/queue_access.log queue_log_format;  # Log yêu cầu hàng đợi
            add_header Retry-After 300;  # Thông báo cho người dùng chờ 5 phút
            return 503;  # Trả về mã trạng thái 503
        }
    }

    upstream odoo_servers {
        server odoo:8069;
    }
}
